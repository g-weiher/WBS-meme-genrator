{"version":3,"sources":["components/MemeCustomizer.js","components/MemeList.js","App.js","reportWebVitals.js","index.js"],"names":["MemeCustomizer","picture","useState","caption1","setCaption1","caption2","setCaption2","meme","useRef","generatedMeme","setGeneratedMeme","ref","className","src","value","onChange","ev","target","onClick","domtoimage","toPng","current","then","dataUrl","catch","error","console","MemeList","memes","onSelect","page","setPage","slice","map","url","id","disabled","length","App","currentPicture","setcurrentPicture","setMemes","fileInput","React","createRef","useEffect","axios","get","response","log","data","onSubmit","preventDefault","objectURL","URL","createObjectURL","files","type","window","scrollTo","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yQAuCeA,EApCQ,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACNC,mBAAS,YADH,mBAC/BC,EAD+B,KACrBC,EADqB,OAENF,mBAAS,YAFH,mBAE/BG,EAF+B,KAErBC,EAFqB,KAGhCC,EAAOC,mBAHyB,EAIIN,mBAAS,MAJb,mBAI/BO,EAJ+B,KAIhBC,EAJgB,KAgBtC,OACE,qCACE,sBAAKC,IAAKJ,EAAMK,UAAU,eAA1B,UACE,qBAAKC,IAAKZ,IACV,0BACEa,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAQZ,EAAYY,EAAGC,OAAOH,QACxCF,UAAU,eAEZ,0BACEE,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAQV,EAAYU,EAAGC,OAAOH,QACxCF,UAAU,kBAGd,wBAAQM,QAzBK,WACfC,IACGC,MAAMb,EAAKc,SACXC,MAAK,SAAUC,GACdb,EAAiBa,MAElBC,OAAM,SAAUC,GACfC,QAAQD,MAAM,8BAA+BA,OAkB/C,oBACChB,EAAgB,qBAAKI,IAAKJ,IAAwB,SCC1CkB,EAlCE,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAAe,EAChB3B,mBAAS,GADO,mBACjC4B,EADiC,KAC3BC,EAD2B,KAIxC,OACE,gCACE,qBAAKnB,UAAU,YAAf,SACGgB,EACEI,MANQ,GAMFF,EANE,GAMeA,EANf,IAORG,KAAI,SAAC1B,GAAD,OACH,qBAEEK,UAAU,YACVM,QAAS,kBAAMW,EAAStB,IAH1B,SAKE,qBAAKM,IAAKN,EAAK2B,OAJV3B,EAAK4B,SAQlB,sBAAKvB,UAAU,qBAAf,UACE,wBAAQwB,SAAUN,GAAQ,EAAGZ,QAAS,kBAAMa,EAAQD,EAAO,IAA3D,eAGCA,EACD,wBACEM,SAvBS,IAuBaN,EAAO,IAAMF,EAAMS,OACzCnB,QAAS,kBAAMa,EAAQD,EAAO,IAFhC,sBCcOQ,MAlCf,WAAgB,IAAD,EAC+BpC,mBAAS,MADxC,mBACNqC,EADM,KACUC,EADV,OAEatC,mBAAS,IAFtB,mBAEN0B,EAFM,KAECa,EAFD,KAGPC,EAAYC,IAAMC,YAmBxB,OAjBAC,qBAAU,WACRC,IAAMC,IAAI,qCAAqCzB,MAAK,SAAC0B,GACnDtB,QAAQuB,IAAID,EAASE,KAAKA,KAAKtB,OAC/Ba,EAASO,EAASE,KAAKA,KAAKtB,YAE7B,IAaD,sBAAKhB,UAAU,MAAf,UACE,uBAAMuC,SAbW,SAACnC,GACpBA,EAAGoC,iBACH,IAAMC,EAAYC,IAAIC,gBAAgBb,EAAUrB,QAAQmC,MAAM,IAC9DhB,EAAkBa,GAClB3B,QAAQuB,IAAII,IASV,UACE,uBAAOI,KAAK,OAAO9C,IAAK+B,EAAWP,GAAG,UACtC,wBAAQsB,KAAK,SAAb,uBAEDlB,EAAiB,cAAC,EAAD,CAAgBtC,QAASsC,IAAqB,KAChE,cAAC,EAAD,CAAUX,MAAOA,EAAOC,SAZL,SAACtB,GACtBmB,QAAQuB,IAAI1C,GACZiC,EAAkBjC,EAAK2B,KACvBwB,OAAOC,SAAS,EAAG,UCdRC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxC,MAAK,YAAkD,IAA/CyC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e48a4ce3.chunk.js","sourcesContent":["import domtoimage from \"dom-to-image\";\r\nimport { useRef, useState } from \"react\";\r\n\r\nconst MemeCustomizer = ({ picture }) => {\r\n  const [caption1, setCaption1] = useState(\"Caption1\");\r\n  const [caption2, setCaption2] = useState(\"Caption2\");\r\n  const meme = useRef();\r\n  const [generatedMeme, setGeneratedMeme] = useState(null);\r\n\r\n  const onSubmit = () => {\r\n    domtoimage\r\n      .toPng(meme.current)\r\n      .then(function (dataUrl) {\r\n        setGeneratedMeme(dataUrl);\r\n      })\r\n      .catch(function (error) {\r\n        console.error(\"oops, something went wrong!\", error);\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <div ref={meme} className=\"current-meme\">\r\n        <img src={picture} />\r\n        <textarea\r\n          value={caption1}\r\n          onChange={(ev) => setCaption1(ev.target.value)}\r\n          className=\"text text1\"\r\n        ></textarea>\r\n        <textarea\r\n          value={caption2}\r\n          onChange={(ev) => setCaption2(ev.target.value)}\r\n          className=\"text text2\"\r\n        ></textarea>\r\n      </div>\r\n      <button onClick={onSubmit}>Submit</button>\r\n      {generatedMeme ? <img src={generatedMeme}></img> : null}\r\n    </>\r\n  );\r\n};\r\nexport default MemeCustomizer;\r\n","import { useState } from \"react\";\r\n\r\nconst MemeList = ({ memes, onSelect }) => {\r\n  const [page, setPage] = useState(0);\r\n  const pageSize = 20;\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"meme-list\">\r\n        {memes\r\n          .slice(page * pageSize, page * pageSize + pageSize)\r\n          .map((meme) => (\r\n            <div\r\n              key={meme.id}\r\n              className=\"meme-card\"\r\n              onClick={() => onSelect(meme)}\r\n            >\r\n              <img src={meme.url}></img>\r\n            </div>\r\n          ))}\r\n      </div>\r\n      <div className=\"meme-list-controls\">\r\n        <button disabled={page <= 0} onClick={() => setPage(page - 1)}>\r\n          -\r\n        </button>\r\n        {page}\r\n        <button\r\n          disabled={pageSize * (page + 1) >= memes.length}\r\n          onClick={() => setPage(page + 1)}\r\n        >\r\n          +\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default MemeList;\r\n","import axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport MemeCustomizer from \"./components/MemeCustomizer\";\nimport MemeList from \"./components/MemeList\";\n\nfunction App() {\n  const [currentPicture, setcurrentPicture] = useState(null);\n  const [memes, setMemes] = useState([]);\n  const fileInput = React.createRef();\n\n  useEffect(() => {\n    axios.get(\"https://api.imgflip.com/get_memes\").then((response) => {\n      console.log(response.data.data.memes);\n      setMemes(response.data.data.memes);\n    });\n  }, []);\n  const onFileUpload = (ev) => {\n    ev.preventDefault();\n    const objectURL = URL.createObjectURL(fileInput.current.files[0]);\n    setcurrentPicture(objectURL);\n    console.log(objectURL);\n  };\n  const onMemeSelected = (meme) => {\n    console.log(meme);\n    setcurrentPicture(meme.url);\n    window.scrollTo(0, 0);\n  };\n  return (\n    <div className=\"App\">\n      <form onSubmit={onFileUpload}>\n        <input type=\"file\" ref={fileInput} id=\"input\"></input>\n        <button type=\"submit\">Submit</button>\n      </form>\n      {currentPicture ? <MemeCustomizer picture={currentPicture} /> : null}\n      <MemeList memes={memes} onSelect={onMemeSelected} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}